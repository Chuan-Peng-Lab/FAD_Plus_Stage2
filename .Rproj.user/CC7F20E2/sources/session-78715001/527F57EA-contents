rm(list = ls())
# setwd("~/Desktop/FAD_New_Start/3_Stage2/3_2_Analayses/3_2_3_Save_points")

# install.packages("pacman") if not installed
if (!requireNamespace('pacman', quietly = TRUE)) {
      install.packages('pacman')
}

pacman::p_load(tidyverse, CTT, psych, lavaan, semPlot, semTools, ltm, mirt, lordif)

CHN <- read.csv(here::here("3_2_3_Save_points","CHN_230711.csv"))
re_CHN <- read.csv(here::here("3_2_3_Save_points","re_CHN_230804.csv"))
ENG <- read.csv(here::here("3_2_3_Save_points","ENG.csv"))
FRN <- read.csv(here::here("3_2_3_Save_points","FRN.csv"))
JPN_1 <- read.csv(here::here("3_2_3_Save_points","JPN_1.csv"))
JPN_2 <- read.csv(here::here("3_2_3_Save_points","JPN_2.csv"))

ALLdata <- list(CHN,ENG,FRN,JPN_1,JPN_2)

CHN1 <- CHN[which(CHN[,"datasetNO"]==1),] 
CHN2 <- CHN[which(CHN[,"datasetNO"]==2),] 
CHN3 <- rbind(CHN[which(CHN[,"datasetNO"]==3.1),],
              CHN[which(CHN[,"datasetNO"]==3.2),])


CHN3.2 <- CHN[which(CHN[,"datasetNO"]==3.2),] #in which will match the retest dataset
length(CHN3.2[,1])

#存在未匹配的情况，原因可能是：
#最开始筛查发放retest信息的时候，只是简单的通过两个注意力检测check，后期有可能被有na值，重复值，或者其他条件给删掉了
#其中三个MLOC的回收回复为空，决定删掉不用这4个subjects的response
which(is.na(match(re_CHN[,"ID"],CHN3.2[,"ID"])))
reCHN_cal_data <- re_CHN[-c(48,64,72,111),]

#function用来匹配retestdata
findretest <- function(n){
  retest_loc <- match(n,CHN3.2[,"ID"])
  res <- CHN3.2[retest_loc,]
  return(res)
}
reCHN_ori_data <- t(mapply(findretest, reCHN_cal_data[,"ID"]))

length(reCHN_cal_data[,1])



########################################
########### Basic descriptions #########
########################################


descriptionsALL <- lapply(ALLdata,describe)

#CHN
table(CHN$datasetNO)
table(CHN$gender)
table(CHN$edu)
table(CHN$age)

mean(CHN$age, na.rm = T) #23.8114
sd(CHN$age, na.rm = T) #7.846043
which(is.na(CHN$age)==T) #NA=2


table(CHN$SES)

table(CHN$ethnic)
table(CHN$objSES)
table(CHN$subSES)
table(CHN$abroad)



table(CHN1$gender)
mean(CHN1$age, na.rm = T) #30.9978
sd(CHN1$age, na.rm = T) #8.379884
table(CHN1$edu)
summary(as.numeric(CHN1$SES))
table(CHN1$abroad)

table(CHN2$gender)
mean(CHN2$age, na.rm = T) #16.94382
sd(CHN2$age, na.rm = T) #1.347796
table(CHN2$edu)
summary(as.numeric(CHN2$SES))
table(CHN2$abroad)

table(CHN3$gender)
mean(CHN3$age, na.rm = T) #21.91494
sd(CHN3$age, na.rm = T) #2.283911
which(is.na(CHN3$age)==T)
table(CHN3$edu)
summary(as.numeric(CHN3$SES))
table(CHN3$abroad)

table(reCHN_cal_data$gender)
table(reCHN_cal_data$edu)
summary(reCHN_cal_data$SES)
table(reCHN_cal_data$abroad)


sd(2023-as.numeric(substring(str_remove_all(reCHN_cal_data$age,"[^0-9]"),1,4)))

#ENG
table(ENG$NO)
sum(table(ENG$NO))
table(ENG$gender)
table(CHN$age)

#FRN
table(FRN$gender)
table(FRN$age)

#JPN
length(JPN_1[,"NO"])
length(JPN_2[,"NO"])

table(JPN_2$age)
table(JPN_2$gender)

#re-test
dim(re_CHN)
table(re_CHN$gender)
years_retest <- as.numeric(substring(str_remove_all(re_CHN$age,"[^0-9]"),1,4))
re_CHN$age <- 2023-years_retest

mean(re_CHN$age)
sd(re_CHN$age)

########################################
############  correlations #############
########################################

#cor(FADitems),cor(FADitems-factors),
#cor(FADfactors-BFIfactors),cor(FADfactors-MLOC) CRITERION VALIDITY
#
#SUPPLEMENTARY:MLOC 6-points VS 7-points



forcorrelationsFAD <- function(m){
  fadnameswith4 <- c("FD","SD","UP","FW",
                     "FD1","FD5","FD9","FD13","FD17",
                     "SD2","SD6","SD10","SD14","SD18","SD22","SD24",
                     "UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
                     "FW4","FW8","FW12","FW16","FW21","FW23","FW26")
  relations <- cor(m[,fadnameswith4])
  correlationsto01 <- function(v){
    v_abs <- abs(v)
    cuts <- cut(v_abs,breaks = c(0,0.5,1),labels=c(0,1))
    return(cuts)
  }
  c01 <- apply(relations,1,correlationsto01)
  return(cbind(relations,c01))
}

correlationsFAD <- lapply(ALLdata,forcorrelationsFAD)


#CHN
#FD1-FD9 0.6191240095, FD5-FD13 0.5002225879, UP11-UP19 0.53812335, UP15-UP27 0.5256858164


#ENG
#FD1-FD5 0.61655911, FD1-FD9 0.79003534, FD1-FD13 0.51763799, FD1-FD17  0.53722948, FD5-FD9 0.57856566, FD5-FD13 0.56612362, 
#UP3-UP20 0.50228066, UP11-UP19 0.583069698, UP20-UP25 0.51960160, 
#FW4-FW21 0.583703781, FW8-FW16 0.551046172, FW16-FW23 0.630766282



#FRN
#FD5-FD9
#
#
for (i in 1:length(correlationsFAD)) {
  textnames <- paste("correlations",i,".txt",sep = "")
  write.table(correlationsFAD[[i]],textnames)
}





#######BFI#########
#CHN
#function for BIG5 5 dimensions' scores
CHN_BFIS <- function(datos,nombre,key){
  databfi <- datos[,nombre]
  data_corrected <- matrix(t(apply(databfi,1,function(x){x*key})),ncol = length(key))
  datafinal <- na.exclude(data_corrected)
  bfiscores <- apply(datafinal, 1, function(x){sum(x)/length(key)})
  return(bfiscores)
}  

#外向性 (Extraversion): 1, 6, 11R, 16R, 21, 26R, 31R, 36R, 41, 46, 51R, 56
CHN_BFI_Enames <- c("BFI1","BFI6", "BFI11", "BFI16", "BFI21", "BFI26", "BFI31", "BFI36", "BFI41", "BFI46", "BFI51", "BFI56")
CHN_BFI_Ekeys <- c(1, 1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1)
CHN_BFI_E <- CHN_BFIS(ALLdata[[1]],CHN_BFI_Enames,CHN_BFI_Ekeys)


#宜人性 (Agreeableness): 2, 7, 12R, 17R, 22R, 27, 32, 37R, 42R, 47R, 52, 57
CHN_BFI_Anames <- c("BFI2","BFI7", "BFI12", "BFI17", "BFI22", "BFI27", "BFI32", "BFI37", "BFI42","BFI47", "BFI52", "BFI57")
CHN_BFI_Akeys <- c(1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1)
CHN_BFI_A <- CHN_BFIS(ALLdata[[1]],CHN_BFI_Anames,CHN_BFI_Akeys)



#尽责性 (Conscientiousness): 3R, 8R, 13, 18, 23R, 28R, 33, 38, 43, 48R, 53, 58R
CHN_BFI_Cnames <- c("BFI3","BFI8", "BFI13", "BFI18", "BFI23", "BFI28", "BFI33", "BFI38", "BFI43","BFI48", "BFI53", "BFI58")
CHN_BFI_Ckeys <- c(-1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1)
CHN_BFI_C <- CHN_BFIS(ALLdata[[1]],CHN_BFI_Cnames,CHN_BFI_Ckeys)



#负性情绪/神经质 (Negative Emotionality): 4R, 9R, 14, 19, 24R, 29R, 34, 39, 44R, 49R, 54, 59
CHN_BFI_Nnames <- c("BFI4","BFI9", "BFI14", "BFI19", "BFI24", "BFI29", "BFI34", "BFI39", "BFI44","BFI49", "BFI54", "BFI59")
CHN_BFI_Nkeys <- c(-1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1)
CHN_BFI_N <- CHN_BFIS(ALLdata[[1]],CHN_BFI_Nnames,CHN_BFI_Nkeys)


#开放性 (Open-Mindedness): 5R, 10, 15, 20, 25R, 30R, 35, 40, 45R, 50R, 55R, 60
CHN_BFI_Onames <- c("BFI5","BFI10", "BFI15", "BFI20", "BFI25", "BFI30", "BFI35", "BFI40", "BFI45","BFI50", "BFI55", "BFI60")
CHN_BFI_Okeys <- c(-1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 1)
CHN_BFI_O <- CHN_BFIS(ALLdata[[1]],CHN_BFI_Onames,CHN_BFI_Okeys)



CHN_BFIS <- cbind(CHN_BFI_E,CHN_BFI_A,CHN_BFI_C,CHN_BFI_N,CHN_BFI_O)

CHN_BFI_FAD_Final <- cbind(CHN_BFIS,ALLdata[[1]][,c("FD","SD","UP","FW")])
corCHN_BFI_FAD <- cor(CHN_BFI_FAD_Final[,c("CHN_BFI_E","CHN_BFI_A","CHN_BFI_C","CHN_BFI_N","CHN_BFI_O")],CHN_BFI_FAD_Final[,c("FD","SD","UP","FW")])
write.table(corCHN_BFI_FAD,"CHN_BFI_FAD.txt") #save correlation martix with BFI 5 dimensions



#FRN
fadnames <- c("FD1","FD5","FD9","FD13","FD17",
              "SD2","SD6","SD10","SD14","SD18","SD22","SD24",
              "UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
              "FW4","FW8","FW12","FW16","FW21","FW23","FW26")
FRN_BFI <- FRN[-c(which(is.na(FRN[,"BFI_1"]))),]

FRN_FAD_BFI <- FRN_BFI[,c("FD","SD","UP","FW",fadnames)]
cor_FRN_BFI <- cor(FRN_BFI[,c("Extraversion","Agreabilite" , "Conscience", "EmotionsNegatives","Ouverture")],FRN_FAD_BFI)

write.table(cor_FRN_BFI,"FRN_BFI_FAD.txt")


#########MLOC#########
#select retest cases with MLOC data
re_CHN_FAD_MLOC <- reCHN_cal_data[,c("FD","SD","UP","FW",fadnames)]

CHN_MLOC_INames <- c("MLOC1","MLOC4","MLOC5","MLOC9","MLOC18","MLOC19","MLOC21","MLOC23")
CHN_MLOC_PNames <- c("MLOC3","MLOC8","MLOC11","MLOC13","MLOC15","MLOC17","MLOC20","MLOC22")
CHN_MLOC_CNames <- c("MLOC2","MLOC6","MLOC7","MLOC10","MLOC12","MLOC14","MLOC16","MLOC24")


MLOC_names <- c(CHN_MLOC_INames,CHN_MLOC_PNames,CHN_MLOC_CNames)
MLOC_6_raw <- reCHN_cal_data[,c("ID",MLOC_names)]
MLOC_7_raw <- reCHN_ori_data[,c("ID",MLOC_names)]
filtered_MLOC_6_IDdata <- MLOC_6_raw[-which(MLOC_6_raw[,2]==0),]
filtered_MLOC_6_alldata <- reCHN_cal_data[-which(MLOC_6_raw[,2]==0),]


na.omit(match(MLOC_7_raw[,"ID"],filtered_MLOC_6_IDdata[,"ID"]))
matched_MLOC_7_IDdata <- MLOC_7_raw[-which(-MLOC_6_raw[,2]==0),]
matched_MLOC_7_alldata <- reCHN_ori_data[-which(MLOC_6_raw[,2]==0),]

write.table(cbind(filtered_MLOC_6_alldata,CHN_6_MLOCS),"MLOC6_FAD_filtered.txt")

#calculate MLOC scores
CHN_MLOC_6_I <- apply(filtered_MLOC_6_alldata[,CHN_MLOC_INames]+3,1,sum)
CHN_MLOC_6_P <- apply(filtered_MLOC_6_alldata[,CHN_MLOC_PNames]+3,1,sum)
CHN_MLOC_6_C <- apply(filtered_MLOC_6_alldata[,CHN_MLOC_CNames]+3,1,sum) 
CHN_6_MLOCS <- cbind(CHN_MLOC_6_I,CHN_MLOC_6_P,CHN_MLOC_6_C)

cor_CHN_MLOC_6_FAD <- cor(CHN_MLOCS_6,filtered_MLOC_6_alldata[,c("FD","SD","UP","FW")])


####which response with 7 points using the same keys
CHN_MLOC_7_Idata <- apply(matched_MLOC_7_alldata[,CHN_MLOC_INames],2,as.numeric)
CHN_MLOC_7_I <- apply(CHN_MLOC_7_Idata+3, 1, sum)

CHN_MLOC_7_Pdata <- apply(matched_MLOC_7_alldata[,CHN_MLOC_PNames],2,as.numeric)
CHN_MLOC_7_P <- apply(CHN_MLOC_7_Pdata+3, 1, sum)

CHN_MLOC_7_Cdata <- apply(matched_MLOC_7_alldata[,CHN_MLOC_CNames],2,as.numeric)
CHN_MLOC_7_C <- apply(CHN_MLOC_7_Cdata+3, 1, sum)

CHN_7_MLOCS <- cbind(CHN_MLOC_7_I,CHN_MLOC_7_P,CHN_MLOC_7_C)

cor_re_CHN_7_MLOC_FAD <- cor(CHN_7_MLOCS,apply(matched_MLOC_7_alldata[,c("FD","SD","UP","FW")],2,as.numeric))
#cor_CHN_MLOC_6_FAD


# wilcox.test((cor_re_CHN_7_MLOC_FAD[,1]), (cor_CHN_MLOC_6_FAD)[,1], paired = T)


########JPN
names_LOC_JPN <- c("LOC_1","LOC_2","LOC_3","LOC_4","LOC_5","LOC_6","LOC_7")

JPN1_LOC <- JPN_1[-c(which(is.na(JPN_1[,"LOC_1"]))),]

#check the structure of JPN_LOC 
psych::fa(JPN1_LOC[,names_LOC_JPN], nfactors = 2, rotate = "oblimin")$loading

#calculate the scores of LOC assuming that 1-4 as factor 1, 5-7 factor 2
only_JPN1_LOC <- JPN1_LOC[,names_LOC_JPN]
JPN1_LOC_1_Scores <- apply(only_JPN1_LOC[,c("LOC_1","LOC_2","LOC_3","LOC_4")],1,sum)
JPN1_LOC_2_Scores <- apply(only_JPN1_LOC[,c("LOC_5","LOC_6","LOC_7")],1,sum)

cor_LOC_JPN1 <- cor(cbind(JPN1_LOC_1_Scores,JPN1_LOC_2_Scores),JPN1_LOC[,c("FD","SD","UP","FW")])



JPN2_LOC_1_Scores <- apply(JPN_2[,c("LOC_1","LOC_2","LOC_3","LOC_4")],1,sum)
JPN2_LOC_2_Scores <- apply(JPN_2[,c("LOC_5","LOC_6","LOC_7")],1,sum)

cor_LOC_JPN2 <- cor(cbind(JPN2_LOC_1_Scores,JPN2_LOC_2_Scores),JPN_2[,c("FD","SD","UP","FW")])





########################################
############  RELIABILITY ##############
########################################

#alpha, omega, test-retest

alphasandomegas <- function(m){ 
  fadnames <- c("FD1","FD5","FD9","FD13","FD17",
                "SD2","SD6","SD10","SD14","SD18","SD22","SD24",
                "UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
                "FW4","FW8","FW12","FW16","FW21","FW23","FW26")
  alpha0 <- (CTT::reliability(m[,fadnames]))$alpha
  omega0 <- (psych::omega(m[,fadnames]))$omega.tot
  FDnames <- c("FD1","FD5","FD9","FD13","FD17")
  SDnames <- c("SD2","SD6","SD10","SD14","SD18","SD22","SD24")
  UPnames <- c("UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27")
  FWnames <- c("FW4","FW8","FW12","FW16","FW21","FW23","FW26")
  alphafd <- (CTT::reliability(m[,FDnames]))$alpha
  alphasd <- (CTT::reliability(m[,SDnames]))$alpha
  alphaup <- (CTT::reliability(m[,UPnames]))$alpha
  alphafw <- (CTT::reliability(m[,FWnames]))$alpha
  omegafd <- (psych::omega(m[,FDnames]))$omega.tot
  omegasd <- (psych::omega(m[,SDnames]))$omega.tot
  omegaup <- (psych::omega(m[,UPnames]))$omega.tot
  omegafw <- (psych::omega(m[,FWnames]))$omega.tot
  res <- cbind(alpha0,alphafd,alphasd,alphaup,alphafw,
               omega0,omegafd,omegasd,omegaup,omegafw)
  return(res)
}
alphaandomega <- lapply(ALLdata,alphasandomegas)
reliabilities <- matrix(unlist(alphaandomega),nrow = 5,byrow = T) 
colnames(reliabilities) <- c("alpha","alphaFD","alphaSD","alphaUP","alphaFW",
                             "omega","omegaFD","omegaSD","omegaUP","omegaFW")
rownames(reliabilities) <- c("CHN","ENG","FRN","JPN_1","JPN_2")
write.table(reliabilities,"alphasandomegas.txt")




fadfactornames <- c("FD","SD","UP","FW")

re_CHN_FAD_factors_scores <- reCHN_cal_data[,fadfactornames]

re_CHN_ori_FAD_factors_scores <- matrix(as.numeric(reCHN_ori_data[,fadfactornames]),ncol = length(fadfactornames))
colnames(re_CHN_ori_FAD_factors_scores) <- fadfactornames

cor(re_CHN_FAD_factors_scores,re_CHN_ori_FAD_factors_scores)
#     FD           SD          UP         FW
#FD  0.6806167  0.327128362  0.07046590 -0.2112382
#SD  0.2494703  0.671196296 -0.08362712  0.2127180
#UP  0.1880708 -0.004421683  0.65947826  0.1529998
#FW -0.2439795  0.211073618  0.13406782  0.7603420




########################################
################  CFA ##################
########################################


#4.test 4-factor model fits CONSTRUCT VALIDITY
#base of MI, compare loadings in different datasets

forcfaFAD_model4 <- function(m){
  model <-  'FD =~ FD1 + FD5 + FD9 + FD13 + FD17;
  SD =~ SD2 + SD6 + SD10 + SD14 + SD18 + SD22 + SD24;
  UP =~ UP3 + UP7 + UP11 + UP15 + UP19 + UP20 + UP25 + UP27;
  FW =~ FW4 + FW8 + FW12 + FW16 + FW21 + FW23 + FW26'
  fadnames <- c("FD1","FD5","FD9","FD13","FD17",
                "SD2","SD6","SD10","SD14","SD18","SD22","SD24",
                "UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
                "FW4","FW8","FW12","FW16","FW21","FW23","FW26")
  mfad <- m[,fadnames]
  rescfa <- lavaan::cfa(model,mfad,estimator="ml")
  semPlot::semPaths(rescfa,"std",rotation = 2,layout = "tree2",nCharNodes = 0,
                    sizeLat = 15, sizeLat2 = 7, label.norm = "OOOOO", 
                    mar=c(2,6,2,4), curvePivot = TRUE,
                    edge.label.cex=1.2, residuals = F)
  res <- standardizedSolution(rescfa)
  return(res)
}

cfaFAD_model4 <- lapply(ALLdata, forcfaFAD_model4)

for (i in 1:length(cfaFAD_model4)) {
  textnames <- paste("cfas",i,".txt",sep = "")
  write.table(cfaFAD_model4[[i]],textnames)
}






########################################
###### Measurement Invariance ##########
########### CFA MULTIGROUP #############
########################################

#- all non-english VS eng, eng1 VS eng2, chn VS eng, frn VS eng, jpn VS eng

FAD_model4 <-  'FD =~ FD1 + FD5 + FD9 + FD13 + FD17
                SD =~ SD2 + SD6 + SD10 + SD14 + SD18 + SD22 + SD24
                UP =~ UP3 + UP7 + UP11 + UP15 + UP19 + UP20 + UP25 + UP27
                FW =~ FW4 + FW8 + FW12 + FW16 + FW21 + FW23 + FW26'

#this model is a test model, we have tried to release different items one by one...
#FAD_model4_test <-  'FD =~ FD1 + FD5 + c(v1,v1)*FD9 + FD13 + c(v1,v1)*FD17
#                     SD =~ SD2 + c(v1,v1)*SD6 + SD10 + SD14 + c(v1,v1)*SD18 + SD22 + c(v1,v1)*SD24
#                     UP =~ UP3 + c(v1,v1)*UP7 +  UP11 + c(v1,v1)*UP15 + UP19 + c(v1,v1)*UP20 + c(v1,v1)*UP25 + c(v1,v1)*UP27  
#                     FW =~ FW4 + c(v1,v1)*FW8 + c(v1,v1)*FW12 + FW16 + FW21 + c(v1,v1)*FW23 + c(v1,v1)*FW26'

FAD_model4_test_old <-  'FD =~ FD1 + FD5 + c(v1,v1)*FD9 + c(v1,v1)*FD13 + c(v1,v1)*FD17
                     SD =~ SD2 + c(v1,v1)*SD6 + SD10 + c(v1,v1)*SD14 + c(v1,v1)*SD18 + c(v1,v1)*SD22 + c(v1,v1)*SD24
                     UP =~ UP3 + c(v1,v1)*UP7 + c(v1,v1)* UP11 + c(v1,v1)*UP15 + c(v1,v1)*UP19 + c(v1,v1)*UP20 + c(v1,v1)*UP25 + c(v1,v1)*UP27  
                     FW =~ FW4 + c(v1,v1)*FW8 + c(v1,v1)*FW12 + c(v1,v1)*FW16 + c(v1,v1)*FW21 + c(v1,v1)*FW23 + c(v1,v1)*FW26'

#function made for testing MI in our case that could use different cfa model, which we achieved partial MI
forcfaMI <- function(m1,m2,nombre,modelo){
  res <- list()
  fadnames <- nombre
  model <-  modelo
  m1fad <- m1[,fadnames]
  m2fad <- m2[,fadnames]
  g <- c(rep("0",length(m1[,1])),rep("1",length(m2[,1])))
  datas <- cbind(rbind(m1fad,m2fad),g)
  datas$g <- factor(datas$g,levels = c("0","1"))
  fit1 <- cfa(model,datas,group = "g") 
  fit2 <- cfa(model,datas,group = "g", group.equal="loadings")
  fit3 <- cfa(model,datas,group = "g", group.equal = c("intercepts", "loadings"))
  fit4 <- cfa(model,datas,group = "g", group.equal = c("intercepts", "loadings","residuals"))
  res[[1]] <- lavTestLRT(fit1, fit2, fit3, fit4)
  res[[2]] <- rbind(summary(fit1,fit.measures=T)$fit, summary(fit2,fit.measures=T)$fit, summary(fit3,fit.measures=T)$fit, summary(fit4,fit.measures=T)$fit)
  #res1 <- modindices(fit1, sort = T, maximum.number = 10)
  return(res)
} 


#- MI with NEW MODEL all non-ENG VS ENG, UK_ENG VS US_ENG, CHN VS ENG, FRN VS ENG, JPN VS ENG

#non-ENG VS ENG
nonENG <- rbind(CHN[,fadnames],FRN[,fadnames],JPN_1[,fadnames],JPN_2[,fadnames])
nonENG_ENG_model4 <- forcfaMI(nonENG,ENG,fadnames,FAD_model4)
#nonENG_ENG_modeltest <- forcfaMI(nonENG,ENG,fadnames,FAD_model4_test)
nonENG_ENG_modeltest_old <- forcfaMI(nonENG,ENG,fadnames,FAD_model4_test_old)


#UK_ENG VS US_ENG
#table(ENG[,"NO"]) #only ENG 1.1 1.2 - UK
#UK_ENG <- ENG[which(ENG[,"NO"]=="ENG1.1"|ENG[,"NO"]=="ENG1.2"),]
#length(UK_ENG$NO)
#mean(UK_ENG$age)
#sd(UK_ENG$age)
#US_ENG <- ENG[intersect(which(ENG[,"NO"]!="ENG1.1"),which(ENG[,"NO"]!="ENG1.2")),]

#UK_US_model4 <- forcfaMI(UK_ENG,US_ENG,fadnames,FAD_model4)
#UK_US_modeltest <- forcfaMI(UK_ENG,US_ENG,fadnames,FAD_model4_test)
#UK_US_modeltest_old <- forcfaMI(UK_ENG,US_ENG,fadnames,FAD_model4_test_old)


#CHN VS ENG
CHN_ENG_model4 <- forcfaMI(CHN,ENG,fadnames,FAD_model4)
#CHN_ENG_modeltest <- forcfaMI(CHN,ENG,fadnames,FAD_model4_test)
CHN_ENG_modeltest_old <- forcfaMI(CHN,ENG,fadnames,FAD_model4_test_old)


#FRN VS ENG
FRN_ENG_model4 <- forcfaMI(FRN,ENG,fadnames,FAD_model4)
#FRN_ENG_modeltest <- forcfaMI(FRN,ENG,fadnames,FAD_model4_test)
FRN_ENG_modeltest_old <- forcfaMI(FRN,ENG,fadnames,FAD_model4_test_old)

#JPN VS ENG
#JPN_FAD <- rbind(JPN_1[,fadnames],JPN_2[,fadnames])
#JPN_ENG_model4 <- forcfaMI(JPN_FAD,ENG,fadnames,FAD_model4)
#JPN_ENG_modeltest <- forcfaMI(JPN_FAD,ENG,fadnames,FAD_model4_test)

JPN1_ENG_model4 <- forcfaMI(JPN_1[,fadnames],ENG,fadnames,FAD_model4)
#JPN1_ENG_modeltest <- forcfaMI(JPN_1[,fadnames],ENG,fadnames,FAD_model4_test)
JPN1_ENG_modeltest_old <- forcfaMI(JPN_1[,fadnames],ENG,fadnames,FAD_model4_test_old)


JPN2_ENG_model4 <- forcfaMI(JPN_2[,fadnames],ENG,fadnames,FAD_model4)
#JPN2_ENG_modeltest <- forcfaMI(JPN_2[,fadnames],ENG,fadnames,FAD_model4_test)
JPN2_ENG_modeltest_old <- forcfaMI(JPN_2[,fadnames],ENG,fadnames,FAD_model4_test_old)




#SUPPLEMENTARY: MI of 3 CHN sites, MI of 2 JPN sites
table(CHN[,"datasetNO"])
CHN_1 <- CHN[which(CHN[,"datasetNO"]==1),]
CHN_2 <- CHN[which(CHN[,"datasetNO"]==2),]
CHN_3 <- CHN[which(CHN[,"datasetNO"]==3.1|CHN[,"datasetNO"]==3.2),]

CHN1_2_model4 <- forcfaMI(CHN_1,CHN_2,fadnames,FAD_model4)
CHN1_3_model4 <- forcfaMI(CHN_1,CHN_3,fadnames,FAD_model4)
CHN2_3_model4 <- forcfaMI(CHN_2,CHN_3,fadnames,FAD_model4)


#CHN1_2_modeltest <- forcfaMI(CHN_1,CHN_2,fadnames,FAD_model4_test)
#CHN1_3_modeltest <- forcfaMI(CHN_1,CHN_3,fadnames,FAD_model4_test)
#CHN2_3_modeltest <- forcfaMI(CHN_2,CHN_3,fadnames,FAD_model4_test)


CHN1_2_modeltest_old <- forcfaMI(CHN_1,CHN_2,fadnames,FAD_model4_test_old)
CHN1_3_modeltest_old <- forcfaMI(CHN_1,CHN_3,fadnames,FAD_model4_test_old)
CHN2_3_modeltest_old <- forcfaMI(CHN_2,CHN_3,fadnames,FAD_model4_test_old)


JPN1_2_model4 <- forcfaMI(JPN_1,JPN_2,fadnames,FAD_model4)
#JPN1_2_modeltest <- forcfaMI(JPN_1,JPN_2,fadnames,FAD_model4_test)
JPN1_2_modeltest_old <- forcfaMI(JPN_1,JPN_2,fadnames,FAD_model4_test_old)



CHN_JPN1_model4 <- forcfaMI(CHN,JPN_1,fadnames,FAD_model4)
#CHN_JPN1_modeltest <- forcfaMI(CHN,JPN_1,fadnames,FAD_model4_test)
CHN_JPN1_modeltest_old <- forcfaMI(CHN,JPN_1,fadnames,FAD_model4_test_old)



CHN_JPN2_model4 <- forcfaMI(CHN,JPN_2,fadnames,FAD_model4)
#CHN_JPN2_modeltest <- forcfaMI(CHN,JPN_2,fadnames,FAD_model4_test)
CHN_JPN2_modeltest_old <- forcfaMI(CHN,JPN_2,fadnames,FAD_model4_test_old)


mean(UK_ENG$age)
mean(CHN_3$age,na.rm = T)
UK_CHN3_model4 <- forcfaMI(UK_ENG,CHN3,fadnames,FAD_model4)
#UK_CHN3_modeltest <- forcfaMI(UK_ENG,CHN3,fadnames,FAD_model4_test)
UK_CHN3_modeltest_old <- forcfaMI(UK_ENG,CHN3,fadnames,FAD_model4_test_old)




#- EFA with half data of non-english, obtain a NEW MODEL

#function 取一半的数据
set.seed(36)
takehalf <- function(m){
  longitud <- length(m[,1])
  sample_loc <- sample(longitud,size = (longitud/2),replace = F)
  res1 <- m[sample_loc,fadnames]
  res2 <- m[-sample_loc,fadnames]
  res <- list(res1,res2)
  return(res)
}

CHN_1_half <- takehalf(CHN_1)
CHN_2_half <- takehalf(CHN_2)
CHN_3_half <- takehalf(CHN_3)

ENG_half <- takehalf(ENG)
FRN_half <- takehalf(FRN)
JPN_1_half <- takehalf(JPN_1)
JPN_2_half <- takehalf(JPN_2)

#用于EFA的数据
ALL_half_1 <- rbind(CHN_1_half[[1]],CHN_2_half[[1]],CHN_3_half[[1]],
                      ENG_half[[1]],FRN_half[[1]],JPN_1_half[[1]],JPN_2_half[[1]])

write.csv(ALL_half_1,"halftestnmf.csv")

#用于MI的数据
nonENGhalf_2 <- rbind(CHN_1_half[[2]],CHN_2_half[[2]],CHN_3_half[[2]],
                      FRN_half[[2]],JPN_1_half[[2]],JPN_2_half[[2]])

CHN_half_2 <- rbind(CHN_1_half[[2]],CHN_2_half[[2]],CHN_3_half[[2]])

JPN_half_2 <- rbind(JPN_1_half[[2]],JPN_2_half[[2]])

length(ALL_half_1[,1])
correlations_half <- cor(ALL_half_1)



#ALLFAD_data <- rbind(CHN[,fadnames],FRN[,fadnames],ENG[,fadnames],JPN_1[,fadnames],JPN_2[,fadnames])
#fa.parallel(ALLFAD_data,cor = "poly",n.iter = 100)



fa.parallel(ALL_half_1,cor = "poly",n.iter = 100) #7/8 factors ; 6 components
fa <- fa(correlations_half,nfactors = 4 ,n.obs = 4966, rotate="promax")
fa
fa$loadings

factor.plot(fa)
fa.diagram(fa) #结果会根据sample到的数据，model会改变，目前跑出的结果是在下面的new6model，但是仍然有很大问题

new_6_model <- 'MR1 =~ FD1 + FD5 + FD9 + FD13 + FD17
                MR3 =~ UP19 + UP27 + UP11 + UP7 + UP25 + UP3 + UP15
                MR2 =~ FW4 + FW8 + FW12 + FW21  + FW26
                MR4 =~ SD2  + SD10  + SD22 + SD24
                MR5 =~ FW16 + FW23
                MR6 =~ SD6+ SD14 + SD18 + UP20

                MR1~~ MR3 + MR4 + MR6
                MR2~~ MR5
                MR4~~ MR6'


new_3_model <- 'MR1 =~ FD1 + FD5 + FD9 + FD13 + FD17 + SD2 + SD10  + SD22 + SD24 + SD6+ SD14 + SD18 
                MR3 =~ UP19 + UP27 + UP11 + UP7 + UP25 + UP3 + UP15 + UP20
                MR2 =~ FW4 + FW16 + FW8 + FW12 + FW21 + FW23 + FW26
                
                MR1~~ MR3'

rescfa_model3 <- cfa(new_3_model,nonENGhalf_2)
standardizedSolution(rescfa_model3)

forcfaFAD_model3 <- function(m){
  model <-  'MR1 =~ FD1 + FD5 + FD9 + FD13 + FD17 + SD2 + SD10  + SD22 + SD24 + SD6+ SD14 + SD18 
  MR3 =~ UP19 + UP27 + UP11 + UP7 + UP25 + UP3 + UP15 + UP20
  MR2 =~ FW4 + FW16 + FW8 + FW12 + FW21 + FW23 + FW26

  MR1~~ MR3'
  fadnames <- c("FD1","FD5","FD9","FD13","FD17",
                "SD2","SD6","SD10","SD14","SD18","SD22","SD24",
                "UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27",
                "FW4","FW8","FW12","FW16","FW21","FW23","FW26")
  mfad <- m[,fadnames]
  rescfa <- lavaan::cfa(model,mfad,estimator="ml")
  semPlot::semPaths(rescfa,"std",rotation = 2,layout = "tree2",nCharNodes = 0,
                    sizeLat = 15, sizeLat2 = 7, label.norm = "OOOOO", 
                    mar=c(2,6,2,4), curvePivot = TRUE,
                    edge.label.cex=1.2, residuals = F)
  res <- standardizedSolution(rescfa)
  return(res)
}

cfa(new_3_model,ALL_half_1)


rescfa_model6 <- cfa(new_6_model,FRN_half[[2]]) #FRN_half[[2]], JPN_half_2 法国日本的数据无法拟合这个新model，只有中国和英文的数据可以，后面也就没了做这两个国家MI的意义
standardizedSolution(rescfa_model6)
semPlot::semPaths(rescfa_model3,"std",rotation = 2,layout = "tree2",nCharNodes = 0,
                  sizeLat = 15, sizeLat2 = 7, label.norm = "OOOOO", 
                  mar=c(2,6,2,4), curvePivot = TRUE,
                  edge.label.cex=1.2, residuals = F)



nonENG_ENG_model3 <- forcfaMI(nonENGhalf_2,ENG_half[[2]],fadnames,new_3_model)
CHN

CHN_ENG_model3 <- forcfaMI(CHN_half_2,ENG_half[[2]],fadnames,new_3_model)



########################################
###############   IRT   ################
########################################



#######
detach("package:psych")



FDnames <- c("FD1","FD5","FD9","FD13","FD17")
SDnames <- c("SD2","SD6","SD10","SD14","SD18","SD22","SD24")
UPnames <- c("UP3","UP7","UP11","UP15","UP19","UP20","UP25","UP27")
FWnames <- c("FW4","FW8","FW12","FW16","FW21","FW23","FW26")


ggumfad1 <- function(m,dimensionnames) { 
  n <- length(m[1,])
  mdim<- m[,dimensionnames]
  res <- mirt(mdim,1,itemtype = "ggum") #generalized graded unfolding model 
  ressum <- summary(res)
  coefres <- coef(res)
  listcoefres <- unlist(coefres)
  l <- length(listcoefres)
  listcoefres <- listcoefres[-c(l-1,l)]
  coefmatrix <- matrix(listcoefres,nrow = n,byrow = T)
  resfinal <- cbind(ressum[[1]],ressum[[2]],coefmatrix)
  return(resfinal)
}

#little estimation of each dimension with irt using generalized graded unfolding model #TAKES TIME
CHN_FD_ggum <- ggumfad1(CHN,FDnames)
CHN_SD_ggum <- ggumfad1(CHN,SDnames)
CHN_UP_ggum <- ggumfad1(CHN,UPnames)
CHN_FW_ggum <- ggumfad1(CHN,FWnames)



forLordif <- function(m1,m2,dimensionnames){
  m1dim <- m1[,dimensionnames]
  m2dim <- m2[,dimensionnames]
  g <- c(rep("0",length(m1dim[,1])),rep("1",length(m2dim[,1])))
  datas <- rbind(m1dim,m2dim)
  reslordif <- lordif(datas, g, criterion = "Chisqr", 
                      pseudo.R2 = c("Nagelkerke"),
                      alpha = 0.05, minCell = 1)
}
#set alpha=0.05, if set =0.01 better results detect with more items without DIF



forLordif(nonENG,ENG,FDnames) 
forLordif(nonENG,ENG,SDnames) 
forLordif(nonENG,ENG,UPnames) 
forLordif(nonENG,ENG,FWnames)

###res CHN-ENG
forLordif(CHN,ENG,FDnames) 
forLordif(CHN,ENG,SDnames) #SD 2 
forLordif(CHN,ENG,UPnames) 
forLordif(CHN,ENG,FWnames)

#forLordif(CHN_3,UK_ENG,FDnames)
#forLordif(CHN_3,UK_ENG,SDnames) #SD 2, SD6, SD22
#forLordif(CHN_3,UK_ENG,UPnames)
#forLordif(CHN_3,UK_ENG,FWnames) #FW4, FW8

forLordif(CHN_3,CHN_1,FDnames)
forLordif(CHN_3,CHN_1,SDnames) #SD 2, SD6, SD22
forLordif(CHN_3,CHN_1,UPnames)
forLordif(CHN_3,CHN_1,FWnames)


###res FRN-ENG
forLordif(FRN,ENG,FDnames) 
forLordif(FRN,ENG,SDnames) 
forLordif(FRN,ENG,UPnames) 
forLordif(FRN,ENG,FWnames) 

###res JPN_1-ENG
forLordif(JPN_FAD,ENG,FDnames) 
forLordif(JPN_FAD,ENG,SDnames)
forLordif(JPN_FAD,ENG,UPnames) 
forLordif(JPN_FAD,ENG,FWnames)

forLordif(JPN_1,ENG,FDnames) 
forLordif(JPN_1,ENG,SDnames)
forLordif(JPN_1,ENG,UPnames) 
forLordif(JPN_1,ENG,FWnames)

###res JPN_2-ENG
forLordif(JPN_2,ENG,FDnames) 
forLordif(JPN_2,ENG,SDnames)
forLordif(JPN_2,ENG,UPnames) 
forLordif(JPN_2,ENG,FWnames)

forLordif(JPN_1,JPN_2,FDnames) 
forLordif(JPN_1,JPN_2,SDnames)
forLordif(JPN_1,JPN_2,UPnames) 
forLordif(JPN_1,JPN_2,FWnames)


#forLordif(UK_ENG,US_ENG,FDnames) 
#forLordif(UK_ENG,US_ENG,SDnames)
#forLordif(UK_ENG,US_ENG,UPnames) 
#forLordif(UK_ENG,US_ENG,FWnames)

